import pandas as pd

# 示例数据（假设已加载到DataFrame）
data = {
    'Time [s]': [
        '2024/9/18 15:29:57.0', '2024/9/18 15:29:57.2', '2024/9/18 15:29:57.4',
        '2024/9/18 15:29:57.6', '2024/9/18 15:29:57.8', '2024/9/18 15:29:58.0',
        '2024/9/18 15:29:58.2', '2024/9/18 15:29:58.4', '2024/9/18 15:29:58.6',
        '2024/9/18 15:29:58.8', '2024/9/18 15:29:59.0', '2024/9/18 15:29:59.2',
        '2024/9/18 15:29:59.4', '2024/9/18 15:29:59.6', '2024/9/18 15:29:59.8',
        '2024/9/18 15:30:00.0', '2024/9/18 15:30:00.2', '2024/9/18 15:30:00.4',
        '2024/9/18 15:30:00.6', '2024/9/18 15:30:00.8', '2024/9/18 15:30:01.0'
    ]
}
df = pd.DataFrame(data)

# =============================================================================
# 步骤1：解析时间列（关键处理小数点后1位的时间格式）
# =============================================================================
try:
    df['Time [s]'] = pd.to_datetime(
        df['Time [s]'],
        format='%Y/%m/%d %H:%M:%S.%f'  # 明确指定时间格式
    )
except ValueError as e:
    raise ValueError(f"时间格式解析错误: {str(e)}") from e

# =============================================================================
# 步骤2：计算时间差值（精确到毫秒级）
# =============================================================================
# 转换为时间戳（单位：秒）
df['timestamp'] = df['Time [s]'].view('int64') // 1e9  # 转换为Unix时间戳（秒）

# 计算差值（注意：第一个值为NaN）
df['delt_T'] = df['timestamp'].diff()

# =============================================================================
# 步骤3：差值验证（强制校验逻辑）
# =============================================================================
# 定义允许的误差范围（考虑浮点计算误差）
tolerance = 1e-6  # 百万分之一秒

# 检查所有差值是否为0.2秒（排除第一个NaN值）
valid_deltas = df['delt_T'].dropna().between(0.2 - tolerance, 0.2 + tolerance)

# 检查时间顺序是否正常（无倒流）
time_order_ok = (df['delt_T'].dropna() >= 0).all()

# 综合验证
if not valid_deltas.all() or not time_order_ok:
    error_indices = df[~valid_deltas | (df['delt_T'] < 0)].index.tolist()
    error_values = df.loc[error_indices, 'delt_T'].values
    raise ValueError(
        f"时间差值验证失败！\n"
        f"错误位置索引: {error_indices}\n"
        f"错误差值: {error_values}\n"
        f"预期差值应为0.2秒且非负数"
    )

# 清理临时列（可选）
df.drop(columns=['timestamp'], inplace=True)

print("时间差值计算验证通过！")
print(df[['Time [s]', 'delt_T']].head(3))
